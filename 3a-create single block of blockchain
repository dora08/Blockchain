A single block in a blockchain is a data structure that contains information and a reference to the previous block. It typically includes three main components:

- Block Data: Information stored within a block, typically including transaction data in blockchain systems, representing the content or payload of the block.
- Block Nonce: A number added to a block during mining in blockchain, varied to find a hash that meets the difficulty target, crucial for ensuring the integrity and security of the blockchain network.
- Block Hashcode: A cryptographic hash function applied to a block's data, generating a unique identifier for the block, essential for maintaining the integrity and immutability of the blockchain.
- Timestamp: A record of the time when a block is created, aiding in establishing the chronological order of blocks in a blockchain, crucial for ensuring the integrity and validity of transactions.
- Previous Hash: A reference to the hashcode of the preceding block in a blockchain, linking blocks together, forming a chain, and providing a tamper-evident record of transaction history.


import hashlib
import random
import datetime
class Block:
    def __init__(self, data):
        self.data = str(data)
        self.nonce = random.randint(10000, 99999)
        self.previous_hash = Zero_hash
        self.hash = None
        self.hash = hashlib.sha256((self.data + str(self.nonce)).encode())
        self.hash = self.hash.hexdigest()
        self.timestamp = datetime.datetime.now()
        print("Block Data: {}".format(self.data))
        print("Block Nonce: {}".format(self.nonce))
        print("Block Hashcode: {}".format(self.hash))
        print("TimeStamp: {}".format(self.timestamp))
        print("Previous hash: {}".format(self.previous_hash))
        print("\n")
    def getHash(self):
        hash = hashlib.sha256((self.data + str(self.nonce)).encode())
        hash = hash.hexdigest()
        return hash
    def getNonce(self):
        return self.nonce
    def getTimestamp(self):
        return self.timestamp
Zero_hash = []
for x in range(64):
    Zero_hash.append("0")
Zero_hash = str("".join(Zero_hash))
B1 = Block(input("Enter data:"))

