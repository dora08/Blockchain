Multiple blocks in a blockchain context refer to a series of interconnected data structures, where each block contains a set of transactions or data. These blocks are linked together in a chain, forming the blockchain.


import hashlib
import datetime
import random
class Block:
    def __init__(self, data, previous_hash):
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()
        self.timestamp = datetime.datetime.now()
        self.nonce = random.randint(1, 2802)
    def calculate_hash(self):
        sha = hashlib.sha256()
        sha.update(self.data.encode('utf-8') + self.previous_hash.encode('utf-8'))
        return sha.hexdigest()
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
    def create_genesis_block(self):
        return Block("Genesis Block", "0")
    def add_block(self, data):
        previous_hash = self.chain[-1].hash
        new_block = Block(data, previous_hash)
        self.chain.append(new_block)
    def is_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

    def print_chain(self):
        for i in range(len(self.chain)):
            print("Block ID", i, ":")
            print("Data: ", self.chain[i].data)
            print("Previous Hash: ", self.chain[i].previous_hash)
            print("Hash: ", self.chain[i].hash)
            print("Timestamp: ", self.chain[i].timestamp)
            print("Nonce value: ", self.chain[i].nonce)
blockchain = Blockchain()
number_of_blocks = int(input("Enter Number of Blocks: "))
for i in range(number_of_blocks):
    print("Enter Data for Block ", i, " :")
    data = input()
    blockchain.add_block(data)
blockchain.print_chain()
