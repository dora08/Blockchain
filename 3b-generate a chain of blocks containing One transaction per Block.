import hashlib
from datetime import datetime
import random

class Block:
    def __init__(self, block_id, prev_hash, transactions):
        self.block_id = block_id
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.nonce = random.randint(10000, 99999)
        self.prev_hash = prev_hash
        self.transactions = transactions
        self.merkle_root = hashlib.sha256(str(transactions).encode()).hexdigest()

    def display_block_details(self):
        print(f"Block ID: {self.block_id}")
        print(f"Timestamp: {self.timestamp}")
        print(f"Nonce: {self.nonce}")
        print(f"Previous Hash: {self.prev_hash}")
        print(f"Transactions: {self.transactions}")
        print(f"Merkle Root: {self.merkle_root}")
        print()

# Function to create blocks based on user input
def create_blocks():
    num_blocks = int(input("Enter the number of blocks to create: "))
    blocks = []

    prev_hash = "0"  # Initial previous hash

    for block_id in range(1, num_blocks + 1):
        sender = input(f"Enter sender for Block {block_id}: ")
        receiver = input(f"Enter receiver for Block {block_id}: ")
        amount = int(input(f"Enter amount for Block {block_id}: "))
        print()

        transactions = [{"sender": sender, "receiver": receiver, "amount": amount}]
        block = Block(block_id, prev_hash, transactions)
        blocks.append(block)
        prev_hash = block.merkle_root  # Set previous hash for the next block

    return blocks

# Example Usage:
blocks = create_blocks()

# Display block details
for block in blocks:
    block.display_block_details()
