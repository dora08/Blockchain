A hash is a function that converts input data into a fixed-size string of characters, typically for security or efficiency purposes. It's commonly used in cryptography for data integrity verification and password storage. Hash functions are designed to be fast to compute and irreversible, meaning it's difficult to reverse-engineer the original input from the hash value. They're essential for tasks like digital signatures and blockchain technology.
1. **MD5 (Message Digest Algorithm 5)**:
   - Produces a 128-bit hash value.
   - Vulnerable to collision attacks.
   - Widely used but not secure for cryptographic purposes.
2. **SHA-1 (Secure Hash Algorithm 1)**:
   - Generates a 160-bit hash value.
   - Vulnerable to collision attacks.
   - Deprecated for most cryptographic applications.
3. **SHA-224 (Secure Hash Algorithm 224)**:
   - Produces a 224-bit hash value.
   - Part of the SHA-2 family.
   - Offers longer hash output compared to SHA-1, but less commonly used than stronger variants like SHA-256.



import hashlib

flag = True
while (flag):
    text = input("Enter data to compute hash: ").encode()
    print("1: MD5")
    print("2: SHA-1")
    print("3: SHA-224")
    
    choice = int(input("Select Algorithm: "))
    if choice == 1:
        hashvalue = hashlib.md5(text).hexdigest()
        print("Hash Value using MD5 is: ", hashvalue)
    elif choice == 2:
        hashvalue = hashlib.sha1(text).hexdigest()
        print("Hash Value using SHA-1 is: ", hashvalue)
    else:
        hashvalue = hashlib.sha224(text).hexdigest()
        print("Hash Value using SHA-224 is: ", hashvalue)

    flag_choice = input("Do you want to continue y/n: ")
    if flag_choice == "n":
        flag = False
