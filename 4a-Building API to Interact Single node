import datetime
import hashlib
import json
from flask import Flask, jsonify, request
from uuid import uuid4
from urllib.parse import urlparse

class Blockchain:
    def __init__(self):
        self.chain = []
        self.transactions = []
        self.create_block(proof=1, previous_hash=0)
        self.nodes = set()

    def create_block(self, proof, previous_hash):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': str(datetime.datetime.now()),
            'proof': proof,
            'previous_hash': previous_hash,
            'transaction': self.transactions
        }
        self.transactions = []
        self.chain.append(block)
        return block

    def get_previous_block(self):
        return self.chain[-1]

    def proof_of_work(self, previous_proof):
        new_proof = 1
        check_proof = False
        while check_proof is False:
            hash_value = hashlib.sha256(str(new_proof * 2 - previous_proof * 2).encode()).hexdigest()
            if hash_value[:5] == '00000':
                check_proof = True
            else:
                new_proof += 1
        return new_proof

    def hash(self, block):
        encoded_block = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(encoded_block).hexdigest()

    def is_chain_valid(self, chain):
        previous_block = chain[0]
        block_index = 1
        while block_index < len(chain):
            block = chain[block_index]
            if block['previous_hash'] != self.hash(previous_block):
                return False
            previous_proof = previous_block['proof']
            new_proof = block['proof']
            hash_value = hashlib.sha256(str(new_proof * 2 - previous_proof * 2).encode()).hexdigest()
            if hash_value[:5] != '00000':
                return False
            previous_block = block
            block_index += 1
        return True

    def add_transaction(self, sender, receiver, amount):
        self.transactions.append({'sender': sender,
                                  'receiver': receiver,
                                  'amount': amount})
        previous_block = self.get_previous_block()
        return previous_block['index'] + 1

app = Flask(__name__)
blockchain = Blockchain()

@app.route('/mine_block', methods=['GET'])
def mine_block():
    previous_block = blockchain.get_previous_block()
    previous_proof = previous_block['proof']
    proof = blockchain.proof_of_work(previous_proof)
    previous_hash = blockchain.hash(previous_block)
    block = blockchain.create_block(proof, previous_hash)
    response = {'message': 'block is mined',
                'index': block['index'],
                'timestamp': block['timestamp'],
                'proof': block['proof'],
                'previous_hash': block['previous_hash']}
    return jsonify(response), 200

@app.route('/get_chain', methods=['GET'])
def get_chain():
    response = {'chain': blockchain.chain, 'length': len(blockchain.chain)}
    return jsonify(response), 200

@app.route('/is_valid', methods=['GET'])
def is_valid():
    is_valid = blockchain.is_chain_valid(blockchain.chain)
    if is_valid:
        response = {'message': 'Your chain is valid'}
    else:
        response = {'message': 'Your chain is not valid'}
    return jsonify(response), 200

@app.route('/add_transaction', methods=['POST'])
def add_transaction():
    json_data = request.get_json()
    transaction_keys = ['sender', 'receiver', 'amount']
    if not all(key in json_data for key in transaction_keys):
        return 'Some elements are missing', 400
    index = blockchain.add_transaction(json_data['sender'],
                                       json_data['receiver'],
                                       json_data['amount'])
    response = {'Message': f'The transaction is added to block {index}'}
    return jsonify(response), 201

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)


Install Package flask (pip install flask)

Run the program(idle code)

Start Postman

1) Get initial chain
Method – GET
Request URL – http://127.0.0.1:5000/get_chain

2) Add Transaction
Method – POST
Request URL - http://127.0.0.1:5000/add_transaction
Under Body – select raw – select JSON
Add Transaction details
{
    "sender":"Alice",
    "receiver":"Bob",
    "amount":"200"
}
Transaction added

3) Mine block
Method – GET
Request - URL - http://127.0.0.1:5000/mine_block

4) Get Chain
Method – GET
Request URL - http://127.0.0.1:5000/get_chain

5) Check if chain is valid
Method – GET
Request URL - http://127.0.0.1:5000/is_valid

Requests are displayed(In idle output)
