import hashlib
from datetime import datetime
import random

class Block:
    def __init__(self, block_id, prev_hash, transactions):
        self.block_id = block_id
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.nonce = random.randint(10000, 99999)
        self.prev_hash = prev_hash
        self.transactions = transactions
        self.merkle_tree_root = self.build_merkle_tree_root(transactions)

    def build_merkle_tree_root(self, transactions):
        if not transactions:
            return hashlib.sha256(b"").hexdigest()

        # Create a list of transaction hashes
        transaction_hashes = [hashlib.sha256(str(transaction).encode()).hexdigest() for transaction in transactions]

        # Build the Merkle Tree
        while len(transaction_hashes) > 1:
            temp_hashes = []
            for i in range(0, len(transaction_hashes), 2):
                combined = transaction_hashes[i] + (transaction_hashes[i + 1] if i + 1 < len(transaction_hashes) else "")
                temp_hashes.append(hashlib.sha256(combined.encode()).hexdigest())

            transaction_hashes = temp_hashes

        return transaction_hashes[0]

    def display_block_details(self):
        print(f"Block ID: {self.block_id}")
        print(f"Timestamp: {self.timestamp}")
        print(f"Nonce: {self.nonce}")
        print(f"Previous Hash: {self.prev_hash}")
        print(f"Transactions: {self.transactions}")
        print(f"Merkle Tree Root: {self.merkle_tree_root}")
        print()

# Function to create blocks based on user input
def create_blocks():
    num_blocks = int(input("Enter the number of blocks to create: "))
    blocks = []

    prev_hash = "0"  # Initial previous hash

    for block_id in range(1, num_blocks + 1):
        transactions = []
        num_transactions = int(input(f"Enter the number of transactions for Block {block_id}: "))

        for _ in range(num_transactions):
            sender = input("Enter sender: ")
            receiver = input("Enter receiver: ")
            amount = int(input("Enter amount: "))
            transaction = {"sender": sender, "receiver": receiver, "amount": amount}
            transactions.append(transaction)
            print()

        block = Block(block_id, prev_hash, transactions)
        blocks.append(block)
        prev_hash = block.merkle_tree_root  # Set previous hash for the next block

    return blocks

# Example Usage:
blocks = create_blocks()

# Display block details
for block in blocks:
    block.display_block_details()
