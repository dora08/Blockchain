In asymmetric cryptography, each participant has a pair of keys: a public key and a private key. The private key is kept secret and known only to its owner, while the public key can be freely distributed. When someone wants to send an encrypted message to a recipient, they use the recipient's public key to encrypt the message. Only the recipient, with their corresponding private key, can decrypt and access the original message. This setup ensures secure communication and authentication without the need to share sensitive information like passwords.



from Crypto.PublicKey import RSA

def generate_key_pair():
    # Generate an RSA key pair
    key = RSA.generate(2048)

    # Get the public key in PEM format
    public_key = key.publickey().export_key('PEM').decode('utf-8')

    # Get the private key in PEM format
    private_key = key.export_key('PEM').decode('utf-8')

    return public_key, private_key

def main():
    # Generate key pair
    public_key, private_key = generate_key_pair()

    # Display the keys
    print("Public Key:\n", public_key)
    print("\nPrivate Key:\n", private_key)

if __name__ == "__main__":
    main()

