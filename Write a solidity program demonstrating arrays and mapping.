Smart contracts are self-executing contracts with the terms of the agreement between buyer and seller directly written into code. They run on a blockchain network, ensuring transparency, security, and immutability. Solidity is a popular programming language used to write smart contracts, particularly on the Ethereum blockchain.
Arrays in Solidity are collections of elements of the same type, stored in contiguous memory. They can be of fixed or dynamic length and are accessed by index. Arrays are commonly used to store lists of data.

Mappings are key-value pairs where each value is associated with a unique key. They provide efficient access to values based on their keys. Mappings are often used for storing data that needs to be quickly retrieved based on a specific identifier, such as addresses or IDs.




//Solidity: - References [Array & Mapping]
pragma solidity >0.4.22 <0.6.0;

contract abc{

mapping(uint => string) details;

function updateDetails(uint id,string memory name) public{
details[id] = name;
}

function getDetails(uint id) public view returns(string memory){
return details[id];
}
}
contract testArray{

uint[] myArray;

uint[4] arr = [6,8,5,8];

function Test(uint x) public{
myArray.push(x);
}

function fixedTest(uint) public view returns(uint[4] memory){
return arr;



id:298
name:akshay


get details : 298
}

function getArray() public view returns(uint[] memory){
return myArray;
}

function getLength() public view returns(uint){
return myArray.length;
}
}
