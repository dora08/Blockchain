Smart contracts are self-executing contracts with the terms of the agreement between buyer and seller directly written into code. They run on a blockchain network, ensuring transparency, security, and immutability. Solidity is a popular programming language used to write smart contracts, particularly on the Ethereum blockchain.
Arrays:
Arrays are ordered collections of elements of the same data type.
They can be either fixed-size or dynamic.
Elements in an array are accessed by their index, starting from 0.
Arrays are useful when you need to store a list of items where the order or position of each item matters.
Example: uint[] public numbers; declares a dynamic array of unsigned integers.
Mappings:
Mappings are key-value pairs where each key is unique.
They provide a more flexible way to store and access data compared to arrays.
Mappings are not iterable, meaning you can't directly loop through their keys or values.
They are often used when you need to associate one value with another, such as storing balances in a token contract where each address maps to a balance.
Example: mapping(address => uint) public balances; declares a mapping where addresses are keys and unsigned integers represent balances.




//Solidity: - References [Array & Mapping]
pragma solidity >0.4.22 <0.6.0;

contract abc{

mapping(uint => string) details;

function updateDetails(uint id,string memory name) public{
details[id] = name;
}

function getDetails(uint id) public view returns(string memory){
return details[id];
}
}
contract testArray{

uint[] myArray;

uint[4] arr = [6,8,5,8];

function Test(uint x) public{
myArray.push(x);
}

function fixedTest(uint) public view returns(uint[4] memory){
return arr;



id:298
name:akshay


get details : 298
}

function getArray() public view returns(uint[] memory){
return myArray;
}

function getLength() public view returns(uint){
return myArray.length;
}
}
